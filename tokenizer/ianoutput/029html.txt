 workspace changes from 3.4 to 3.5  
 workspace changes from 3.4 to 3.5  
 summary 
 the most important new feature in 3.5 is the ability to easily offline program applications using workspace geometry point paths. the applications include spot welding, arc welding, paint spraying, material handling, sealant, laser cutting, water jet and deburring. once the geometry path has been created and saved with the model the user can issue a follow gp path command to automatically create and simulate the robot programme in whatever robot language is currently selected. tool graphics have been designed to simulate each tool action. 
 many new  robot languages  are now available as options for workspace including: 
 abb rapid, yaskawa/motoman inform1 and inform2, sankyo and ibm aml2, psi. 
 the commands for editing gp paths have been improved, as have the commands for editing geometry points, editing several geometry points at once (multiple gps), and editing teachpoints. the commands for editing several geometry points should save the user some time over the old gp edit methods. many of the new commands for editing teachpoints are useful in reverse engineering and re-engineering workcells, and for last minute touch-ups of robot programs during offline programming. 
 the user-interface and the efficiency of the  robot and tool calibration  have been improved, while the robotrak setup procedures have been altered to increase their reliability even when used by inexperienced users. 
 in general, the changes in 3.5 reflect the past few years' accumulated experience from both within rsl and close contact with industrial customers of simulating and offline programming complex workcells using  workspace  and  robotrak  
 these features now give the customer an affordable, user friendly tool to carry out the most complex of tasks at shop floor level with confidence. 
 new and changed commands 
 model menu 
 1. load object into model: when a model has been selected the objects displayed will be only those with no parents. 
 2. set project directory : now sets the ready for robot directory to projectdir/robot. 
 3. make directory : copies a file to a path (which is relative to the ws3 directory). 
 create menu 
 create gps submenu 
 1. the create gps on polyline submenu now has the additional command between two polylines which creates gps along the current polyline in the direction of the nearest point on the other polyline. this is useful if the gps are being defined on part whose geometry is represented by two parallel polylines. 
 2. create gps over entire polyline and create gps over entire surface boundary: the commands on these menus work in a similar way to the create gps on polyline and the create gps over surface boundary except that by default the first gp is at the beginnings of the polyline and the second gp is at the end of the polyline. 
 3. align axes with tangent: when this flag is on then when gps are created along a polyline or a surface boundary their default position has the normal vector normal to the tangent (as was the case in workspace 3.4), whereas when the flag is off the normal vector of the gps is not normal to the tangent. 
 4.create exact gp  path on polyline: this is the exact gp path command renamed. 
 layout menu 
 edit object submenu 
 1. information: colour, view, and non-joint axes added. 
 edit robot submenu 
 1. approach vector: moved from options menu - now saved with the robot model. used to decide orientation when creating gps relative to an object feature. 
 edit tools submenu 
 1. attach tool: moves the current object so that its base frame coincides with the coordinate frame of the end link of the robot. a base frame may be defined for an object using the add tool base frame command. 
 2. load and attach tool: same as attach tool except that it also loads the tool object from a model file. loads an object and then positions the object so that its base frame coincides with the coordinate frame of the end link of the robot. a base frame may be defined for an object using the add tool base frame command. 
 the user can create models containing tools as a library for this command. to create a library of tools simply create a model containing all the tools and then save the model. 
 3. dispose of tool: allows the user to select and delete one of the objects (and its descendants) attached to the end link of the robot. 
 4. add tool base frame: adds a coordinate frame to the current object. this may be edited using the move axes and turn axes commands (on the edit joint menu). the frame is used when automatically positioning a tool on the end of the robot (see attach tool). 
 5. gripper of interest: specify which of several grippers on a robot is being referred to. when setting gripper parameters on this menu. 
 6. time to open gripper: sets the time taken to open or close the gripper of interest during a simulation. 
 6. spot weld gun of interest: specify which of several spot weld guns on a robot is being referred to when setting gun parameters on this menu. 
 7. spot weld duration: set the duration of a spot weld (when the gun is closed) by the gun of interest during a simulation. 
 8. gun closed to semi-open time: set the time taken for the spot weld gun of interest to go from closed to semi-open during a simulation. 
 9. gun semi-open to open time: set the time taken for the spot weld gun of interest to go from semi-open to full open during a simulation. 
 edit current pointer/edit geometry point/edit teachpoint submenus 
 1. move/turn cp/tp/gp: several commands have been renamed so that phrase approach vector is used instead of z-axis:- move along approach vector, approach vector up, approach vector down, reverse approach vector, approach vector away from base, drag approach vector. 
 edit geometry point submenu 
 some options have been moved onto the edit multiple gp submenu. 
 edit multiple geometry points submenu 
 almost all the commands on this menu operate on a group of gps selected using the multiple object selection side bar. 
 1. create tps from gps submenu (contains create tps from multiple gps, create tps from all gps). 
 2. change gps approach vector: changes the approach vector for the selected gps. options are arla to tp (converts gps created in the arla language assuming an x-axis approach vector into gps suitable for use in the tp language where a z-axis approach vector is assumed) and tp to arla these options may be used with other languages which have similar approach vectors to tp and arla. 
 3. remove tool from gps: removes the current tool frame from the gps. this is useful if the gps were created from teachpoints using an active tool frame but the user wishes to view the gps as though they were representing the position of the faceplate of the robot at each teachpoint. (see also add tool to gps). 
 4. add tool to gps: removes the current tool frame from the gps. this is useful if the gps were created from teachpoints using a nil tool frame so that they represent the position of the faceplate of the robot, but the user wishes to view the gps as though they were representing the position of the end of the robot tool at each teachpoint. (see also remove tool from gps). 
 5. turn gps about own x-axis: turn all the gps about their own x-axis. 
 6. turn gps about own y-axis: turn all the gps about their own y-axis. 
 7. turn gps about own z-axis: turn all the gps about their own z-axis. 
 8. autoturn gps about approach vector:attempts to find a suitable angle to turn all the gps about their approach vector such that all the gps become achievable by the current robot, then performs the turn. 
 edit teachpoint submenu 
 some options have been moved onto the edit all teachpoints submenu. 
 1. autoturn tp about approach vector: allows the user to interactively turn the teachpoint about its approach vector, showing as it is turned the position of the robot with its tool moved to the teachpoint. 
 edit all teachpoints submenu 
 1. create gps from all tps: creates a geometry point for each teachpoint. if the user wishes then the gps may also store the teachpoint configuration, or if auxiliary axes are present the gps may store the auxiliary axes positions. 
 2. reflect all tps using joints: reflects all the teachpoints by adjusting the joint angles. joint angles 1, 4, and 6 are reversed for each teachpoint. the effect of this on most revolute robots is to reflect the coordinate frames of each teachpoint through a plane passing through joint 1 and its zero position. by reflecting in this way instead of reflecting the coordinate frames of the teachpoints the user ensures that the reflected teachpoints also reflect the robot configurations of the original points. 
 the user is prompted for the name of the robot onto which the new teachpoint file is to be reflected. 
 3. adjust all tps for different tcp: removes the current tool frame from the teachpoints (so that they represent the position of the faceplate of the robot) and adds in a tool frame selected by the user (so that the teachpoints now represent the position of the end of the new robot tool). 
 4. turn all tps about approach vector: turns all the teachpoints about their approach vectors. 
 5. move all tps: moves all the teachpoints through an x,y,z offset relative to the base frame of the robot. 
 6. move all tps using 1 point shift: moves all the teachpoints through a transform defined by the desired position and the old position of a teachpoint. the user first teaches a teachpoint on the robot to represent the desired position of a teachpoint, saves this in the same file as the old teachpoints, brings the file to workspace, then issues the command and selects the new teachpoint and the old teachpoint. 
 7. adjust all tps for bent tool: changes the tcp value (while adjusting the teachpoints so that the position of the faceplate of the robot at each point does not change) using a transform defined by the desired position and old position of a teachpoint. the user first teaches a teachpoint on the robot to represent the desired position of a teachpoint with the bent or changed tool, saves this in the same file as the old teachpoints, brings the file to workspace, then issues the command and selects the new teachpoint and the old teachpoint. 
 edit gp path submenu 
 1.gp path application: sets the application for which the user is using the gp path. the edit gp path as menu will only allow the user to select tool actions which are appropriate for the application. possible applications are waterjet, spot welding, arc welding,  paint spraying, material handling, sealant, laser cutting, and deburring. the user may change the application at any time and then start selecting tool states for the new application. 
 2. edit current gp as menu: allows the user to change the properties of a particular node on a gp path, the node being the one containing the current gp object. each node contains a gp object, various motion properties used to approach that gp from the previous gp node, various actions (including tool actions) which are to be implemented once the robot reaches the gp. the properties of a gp node are described in more detail below: 
 gp object name - name of a geometry point object; 
 motion type - the type of motion (joint, circular, or linear); 
 termination type - the type of termination at the point expressed as a percentage (0 indicates stop at the point, 100 indicates move through or near the point without stopping); 
 velocity - percentage of the maximum velocity to use when moving towards the gp; 
 acceleration - percentage of the maximum acceleration to use when moving towards the gp; 
p>wait time - time for the robot to wait (be stationary) after reaching the gp; 
 routine to call - the name of a routine which is to be called once the gp is reached; 
 signal - the type of signal ling to do once the gp is reached - options are no signal, enterinterferencezone (wait for a signal from another robot saying that the other robot has left a zone of interference, then once it is received send a signal to the other robot saying that it has entered the zone of intereference), leaveinterferencezone (send a signal to another robot saying that it has left a zone of interference). note that interference zones in this context do not need to have their physical bounds described but are defined by when on the gp path the signals are sent; 
 tool action - the tool action to be performed after the robot reaches the gp. possible values are defined by the application (see gp path application) but examples are arcon and arcoff (for arc welding) and paintsprayon and paintsprayoff (for paint spraying). different tool graphics are displayed during a simulation of the robot following the gp path as each action is executed. 
 3. edit current gp path as menu: performs the same task as edit current gp as menu except that it brings up all the gps on the path at once. 
 4. edit gp path as text: allows the user to edit a gp path as though it were a text file. note that the gp path is really an object which is saved with the model in the model file. when the user uses the edit gp path as text command workspace converts the path into a text file temporarily, then converts it back from a text file to a gp object when the user exits from the edit. parts of gp paths may be easily cut and pasted between different gp paths using the text edit commands (control-k b to mark the beginning of a block, control-k k to mark the end of a block, control-k w to write a block to a file, control-k r to read a block from a file). 
 5. append gp path: appends a gp path to the current gp path. 
 6. break gp path before gp: breaks a gp path just before the current gp. 
 7. reverse gp path: reverses the current gp path. 
 8. insert gp at start: inserts a gp at the start of the current gp path. 
 9. insert gp after current gp: inserts a gp into a gp path just after the current gp. 
 10. delete gp: deletes a gp node from the current gp path (note that the gp is only deleted from the gp path - the gp object itself is not deleted). 
 11. move gp to start of path: moves a gp node to the beginnings of the current gp path. 
 12. move gp to after current gp: moves a gp to after the current gp in the gp path. 
 13. scale all speeds: scales the speeds of all the gp nodes in the current path using a scaling factor. a scaling factor of 1 indicates no change. 
 14. change all termination types: sets the termination types for all the gp nodes on the current gp path to a value entered by the user. a termination type of 0 indicates that the robot is to stop at all the points, while a termination type of 100 indicates that the robot is to move through or near all the points without stopping. 
 15. change all motion types: changes the motion type (joint, linear or circular) for all the gp nodes on the current gp path to a new setting. 
 16. remove all tool action: removes all the tool actions from a gp path (e.g. arcon, arcoff). 
 simulate menu 
 1. replay  track and create geometry path: replays a track while creating a geometry path which represents the movement of the robot during the track and any tool actions during the track. this command may be used to create geometry paths from a robot program written in one robot language which is then converted using the follow gp path  command into a robot program written in another robot language. 
 2. replay track and record sweep: replays a track while creating lines to represent the sweep of the tool attached to the end of the robot as the robot moves. enables the user to quickly see if the tool interferes with any fixtures. 
 3. send to robot and receive from robot have been implemented for a wider range of robots. note that the calibration filter is used only when converting between gps and tps (e.g. when gps are converted to tps during a send to robot), or when using the recalibrate tool or calibrate model submenu commands. the calibration filter is not used on teachpoints which are sent to robot or received from robot under any other circumstances. 
 4. edit any file: allows the user to edit any text file. 
 options menu 
 1. the paintshade option has been removed. shade should be used instead. 
 picture submenu 
 1. hiddenline mode: full indicates that the hiddenline removal will still be rigorous even when the user zooms in or out on a workcell, whereas clipped means that hiddenline removal is not performed for objects which are completely off the screen. clipped may be slightly faster than full for large and complex workcells but if clipped is on and the user zooms out then the picture of the workcell may no longer have the outer hidden lines removed correctly. 
 robot options submenu 
 1. autoplace robot using tps: attempts to find a suitable position to place the robot that will allow all the teachpoints to be achievable. the search is conducted in the plane parallel to the screen which passes through the current pointer. during the search a cross is drawn at each position which would be suitable for placing the robot, and at the end of the search the user has the option of placing the robot at a suitable position. 
 2. autoplace robot using multiple gps: works in a similar way to the autoplace robot using tps command except that the search is for a position for placing the robot that will make the selected geometry points achievable. 
 3. label current robot: when this flag is on then the current robot will be labelled on the screen with its name. this is useful when working with several robots in one workcell. 
 4. robot tool path: when this flag is on then the path taken during an arc-weld or a laser cut or a water jet cut will be displayed as a series of lines. 
 tp and gp option submenu 
 1. geometry path display: when this flag is on then geometry paths will be displayed as a dotted line between geometry points with arrows indicating the direction of movement along the geometry path. 
 calibrate robot submenu 
 the calibrate robot submenus have been reorganised so that the user can follow step by step what to do next during a calibration. 
 after each step in the setup workspace checks that the encoder units have returned to zero and that the repeatability has not degraded. 
 1. the robotrak setup menu has been reorganised as follows (note that some commands have been moved to the robotrak special options submenu): 
 exact length of bar: 
 set all zero positions: 
 check repeatabilities: it is important to check that when the cords are pulled away from the robotrak units then returned to their zero position that the repeatability of the zero reading is good. this command displays the readings for all three encoders on the screen so that the user can pull each cord out (at least 2m) then return the cord to its zero (for at least 0.5 of a second) until the colour of the reading changes from red to black and a beep is heard (indicating that three successive zero readings were within three encoder counts of each other). if there are three people available to do the set up then all three cords can be checked for repeatability at once. 
 set encoder bar length (timed): this sets the encoder bar length for each bar in turn. the user has 15 seconds from the issue of this command to place the bar on encoder unit 1. after 15 seconds a reading is taken. the user then has 15 seconds to prepare for a reading from encoder unit 2, and a further 15 seconds to prepare for the reading from encoder unit 3. the command is structured this way so that one person can set up robotrak without assistance. 
 set distance between bases:  the user can either set the distance between the bases one at a time as in workspace 3.4, or set the distances between all three bases all at once (not recommended for accurate work because the sharp angles of the cords can degrade the repeatability of the measurements and setting all distances at once forces the user to pull the cord over sharp angles). 
 length of top part of cord 1: 
 length of top part of cord 2: 
 length of top part of cord 3: 
 continuous cord reading: 
 continuous measurement reading: 
 auto-setup: auto-setup runs through all the above commands one at a time in succession without the user having to select the command. 
 2.  check teachpoints suitable: checks that the current teachpoint file contains teachpoints which provide an adequate range of joint values for each joint to ensure a good calibration (the joint 4 wrist must be flipped for a good calibration), and that the teachpoints are not too close to the plane of robotrak since that would degrade the accuracy of the measurements. 
 3. auto-record robotrak measurements: 
 4. extract errors from measurements: 
 5. the new robotrak special options submenu is organised as follows: 
 card base address: 
 card version: 
 record robotrak measurements: 
 test calibrated robot: 
 test using box: 
 calibrate tool z-axis: 
 calibrate tool x-axis: 
 record trajectory: 
 turn robotrak display off: 
 calibrated robot: 
 xyz teachpoint filter: 
 parameters to calibrate: 
 1. at least four teachpoints are now recommended when recalibrating a tool (instead of 3 which were recommended in 3.4). 
 pendant menu 
 joint zero: sets all the joints of the current robot or mechanism to their zero position. 
 other changes 
 1. the cycles times obtained with fanuc robots are now more accurate than before since they use the same trajectory generation algorithms that are used on fanuc controllers. the accuracy of the cycle times for other robot languages should also be improved. 
 2. the tool actions described under geometry paths are also available from the action menu. 
 3. the workspace signaldef input directive can now take just a robotname as a parameter (though the old signaldef command which took the parameters trackname and external track signal number is still valid). the workspace signaldef output directive is no longer required, but would still be valid is used. 
 4. the multiple object selection sidebar which is used with many commands contains a new option: path. when this is selected then the user chooses a name of a geometry point path and all the geometry points on that path are selected. 
 5. the weldpos and deburrpos functions are now available for use in a joint expression. they work in a similar way to the grippos function. the weldpos varies from 0 to 100 as a spot weld gun goes from full-open to closed, while the deburr function varies 0 to 360 and then returns to zero and repeats all the time that deburring is on. 
 6. macros may now be created using the programme structure and variables of the karel2 language. create a macro by starting a track and then issuing commands from several other menus. as each command is issued it is stored in the track, and if the track is replayed then the commands are executed from the track. not all the commands on the menus are available for use in macros at present. 
    [  return to home page  ]  
   workspace  and  robotrak  are registered trademarks of robot simulations ltd. 
 copyright &copy; 1996 robot simulations ltd 
 last revision 3 april 1996  
