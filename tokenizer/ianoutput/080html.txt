 airsar compressed stokes matrix data (cm) description 
 airsar compressed stokes matrix data (cm) description 
 this manual is still being converted... 
airsar data compression formats
	for airsar data, there are four possible formats :  
		1) compressed stokes matrix data 
			(multilook,quad-pol, low-res, 10 bytes/pixel)
		2) compressed scattering matrix (730 processor) data 
			(single look,quad-pol,10 bytes/pixel)
		3) compressed scattering matrix (3.5 processor) data 
			(single look,quad-pol, low-res, 10 bytes/pixel)
		4) uncompressed synoptic amplitude data 
			(vax real*4, single pol, low-res, 4 bytes/pixel)
	in the following descriptions:
		sign( ) will return the sign of the argument ( � 1) 
		nint( ) will indicate that the nearest integer value is calculated of its 
argument.  
		int( ) will indicate that the truncation of the floating point value to integer 
is calculated of its argument, and that, if the floating point value is less than zero, 
subtraction by 1.0 is additionally required.  note that this is not the same as fortran 
int( ).
		gen_fac is the airsar general scale factor whose value is recorded in the 
header of the oldheader, field 133.
stokes matrix data
	airsar compressed stokes matrix "cm" quad-pol data - 10 bytes per pixel.   
consists of one file for each scene, per frequency.  each line of each file consists of 1024 
azimuth samples.  there are 750 or 1282 lines depending on the processor, each 
corresponding to progressively greater range from the radar.  the azimuth pixel spacing 
is 12.1 meters for the pre-1993 prf, and 8 meters for the 1993 and later prf.  the range 
pixel spacing is 6.66 meters (assumes 20 mhz data).  the first two or three lines in the 
file are header lines.  the data has been symmetrized such that shv = 0.5 (shv +svh), 
and is usually calibrated.  for the "730 processor", the data has been multilooked by 4, 
while for the "3.5 processor", the data has been multilooked by 16.  
� 10 bytes per pixel - quad-pol data, with:
	� byte(1) :  int{log2(m11)}
	� byte(2) : nint{254[mantissa  - 1.5]}
		mantissa = (m11) / 2byte(1))
		qsca = gen_fac [ (byte(2) / 254 ) + 1.5] 2byte(1)
	� byte(3) : nint{127 m12/qsca}
	� byte(4) : nint{127 sign(m13/qsca) sqrt(m13/qsca)}
	� byte(5) : nint{127 sign(m14/qsca) sqrt(m14/qsca)}
	� byte(6) : nint{127 sign(m23/qsca) sqrt(m23/qsca)}
	� byte(7) : nint{127 sign(m24/qsca) sqrt(m24/qsca)}
	� byte(8) : nint{127 m33/qsca}
	� byte(9) : nint{127 m34/qsca}
	� byte(10) : nint{127 m44/qsca}
	the total power is :
		tp = m11 = gen_fac ( byte(2) / 254 + 1.5) 2byte(1)) 
	the remaining terms are given by :
		m12 = m11 byte(3) /127
		m13 = sign(byte(4)) m11 (byte(4) /127)**2
		m14 = sign(byte(5)) m11 (byte(5) /127)**2
		m23 = sign(byte(6)) m11 (byte(6) /127)**2
		m24 = sign(byte(7)) m11 (byte(7) /127)**2
		m33 = m11 byte(8) /127
		m34 = m11 byte(9) /127
		m44 = m11 byte(10) /127
		m22 = m11 - m33 - m44
	the difference between the airsar 'cm' data and sir-c mlc data is chiefly 
that, for airsar, the elements of the stokes matrix are stored directly to each 
compressed byte;  while for sir-c, the cross-products (that when combined appropriately 
comprise the stokes matrix) are stored.  in addition, the airsar data employs a general 
scale factor, while sir-c does not.  and finally, the value stored in the first two bytes by 
airsar is the total power divided by the general scale factor, while the value stored in 
the first two bytes by sir-c is four times the total power.
the stokes matrix and cross-products
the symmetrized stokes matrix may be formed from the cross-products of the scattering 
matrix that are stored by sir-c in the mlc format as follows:
	m(1,1) = (shhshh* + svvsvv* + 2shvshv*) / 4.0
	m(1,2) = (shhshh* - svvsvv*) / 4.0
	m(1,3) = (re(shhshv*) + re(shvsvv*) ) / 2.0
	m(1,4) = (-im(shhshv*) - im(shvsvv*) ) / 2.0
	m(2,1) = m(1,2)
	m(2,2) = (shhshh* +svvsvv* - 2shvshv* ) / 4.0
	m(2,3) = ( re(shhshv*) - re(shvsvv*) ) / 2.0
	m(2,4) = (-im(shhshv*) + im(shvsvv*) )/ 2.0
	m(3,1) = m(1,3)
	m(3,2) = m(2,3)
	m(3,3) = (shvshv*  + re(shhsvv*) / 2.0
	m(3,4) = -im(shhsvv*) / 2.0
	m(4,1) = m(1,4)
	m(4,2) = m(2,4)
	m(4,3) = m(3,4)
	m(4,4) = (shvshv* - re(shhsvv*) )/ 2.0
	the cross-products in terms of the symmetrized stokes matrix elements are :
	shhshh* = 2m(1,2) + 2m(1,1) - m(3,3) - m(4,4)
	shvshv* = m(3,3) + m(4,4)
	svvsvv* = 2m(1,1) - 2m(1,2) - m(3,3) - m(4,4)
	shhshv* = complex( m(1,3) + m(2,3), -m(1,4) - m(2, 4) )
	shhsvv* = complex(  m(3,3) - m(4,4), -2m(3,4) )
	shvsvv* = complex( m(1,3) - m(2,3), -m(1,4) + m(2,4) )
	for slc data, the stokes matrix will not be symmetrized.  the unsymmetrized 
stokes matrix is given by:
	m(1,1) = (shhshh* + shvshv* + svhsvh* + svvsvv*) / 4.0
	m(1,2) = (shhshh* - shvshv* + svhsvh* - svvsvv*) / 4.0
	m(1,3) = (re(shhshv*) + re(svhsvv*) ) / 2.0
	m(1,4) = (-im(shhshv*) - im(svhsvv*) ) / 2.0
	m(2,1) = (shhshh* + shvshv* - svhsvh* - svvsvv*) / 4.0
	m(2,2) = (shhshh* + svvsvv* - shvshv* - svhsvh*) / 4.0
	m(2,3) = ( re(shhshv*) - re(svhsvv*) ) / 2.0
	m(2,4) = (-im(shhshv*) + im(svhsvv*) )/ 2.0
	m(3,1) = (re(shhsvh*) + re(shvsvv*) ) / 2.0
	m(3,2) = ( re(shhsvh*) - re(shvsvv*) ) / 2.0
	m(3,3) = (shvshv*  + re(shhsvv*) / 2.0
	m(3,4) = (-im(shhsvv*+im(shvsvh*) / 2.0
	m(4,1) =  (-im(shhsvh*) - im(shvsvv*) ) / 2.0
	m(4,2) = (-im(shhsvh*) + im(shvsvv*) )/ 2.0
	m(4,3) =  (-im(shhsvv* - im(shvsvh*) / 2.0
	m(4,4) = (re(shvsvh*) - re(shhsvv*) )/ 2.0
 <img src="gif/icons/back-yellow.gif"
align=bottom>      imaging radar home page
 updated 8/25/94 
 bruce.chapman@jpl.nasa.gov 
